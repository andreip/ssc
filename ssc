#!/usr/bin/ruby

require 'net/http'
require 'xml/smart'
require 'cgi'

require "optparse"

$server_name="susestudio.com"
$api_prefix="api/v1/user"
$username=""
$password=""
version="0.1"


class Request
  attr_accessor :method, :call, :data

  def go
    uri = URI.parse("http://#{$server_name}/#{$api_prefix}/#{call}")
    request = nil
    if method == "GET"
      request = Net::HTTP::Get.new(uri.request_uri)
    elsif method == "POST"
      request = Net::HTTP::Post.new(uri.request_uri)
      request.set_form_data(data, ";") unless data.nil?
    elsif method == "DELETE"
      request = Net::HTTP::Delete.new(uri.request_uri)
    end
    request.basic_auth($username, $password)
    begin
      Net::HTTP.start(uri.host, uri.port) do |http|
        http.read_timeout = 45
        response = http.request(request)
        unless( response.kind_of? Net::HTTPSuccess )
          return ["Server returned '#{response.code}', message: \n#{response.body}", false]
        end
        return [response.body, true]
      end
    rescue => e
      return ["Error: #{e.to_s}", false]
    end
  end
end

class ApplianceHandler
  def self.list_appliances s
    xml = XML::Smart.string( s )
    res = String.new
    xml.find("/appliances/appliance").each do |a|
      res << "== " + a.find("name").first.to_s + "\n"
      res << "  Id:          " + a.find("id").first.to_s + "\n"
      res << "  Based on:    " + a.find("basesystem").first.to_s + "\n"
      res << "  Cloned from: #{a.find("parent/name").first.to_s} (#{a.find("parent/id").first.to_s})\n" unless a.find("parent/name").length == 0
      res << "  Builds:      #{a.find("builds/build").length} (#{a.find("builds/build/compressed_image_size").inject(0){|sum,item| sum + item.to_i}})\n"
      res << "\n"
    end
    res
  end

  def self.clone_appliance s
    xml = XML::Smart.string( s )
    res = String.new
    
    res << "Created Appliance: #{xml.find("/appliance/name").first.to_s}\n"
    res << "  Id:          " + xml.find("/appliance/id").first.to_s + "\n"
    res << "  Based on:    " + xml.find("/appliance/basesystem").first.to_s + "\n"
    res << "  Cloned from: #{xml.find("/appliance/parent/name").first.to_s} (#{xml.find("/appliance/parent/id").first.to_s})\n" unless xml.find("/appliance/parent/name").length == 0

    res
  end
end


#if ARGV.size != 2
opt = OptionParser.new
opt.banner = "Usage: ssc [options] <cmd> [command-options]"

opt.on( "-h", "--help", "Print this message" ) do
  puts opt
  exit
end

opt.on( "-s", "--server", "=HOST",
  "The Studio hostname" ) do |v|
  $server_name = v
end

opt.on( "-u", "--username", "=USER_NAME", "User name") do |v|
  $username = v
end

opt.on( "-p", "--password", "=PASSWORD", "Password") do |v|
  $password = v
end

opt.on( "-v", "--version",  "Print the version") do |v|
  puts "ssc #{version} - A command line interface to SUSE Studio"
  exit 0
end

opt.separator("\n")
opt.separator("Commands:")
opt.separator("    Managing your appliances:")
opt.separator("      listappliances,la\t\t     Get a list of your appliances")
opt.separator("      cloneappliance,ca\t\t     Create a new appliance by cloning a template")
opt.separator("      deleteappliance,da\t     Delete an appliance")
opt.separator("\n")

begin
  opt.parse!( ARGV )
rescue OptionParser::InvalidOption
  STDERR.puts $!
  STDERR.puts opt
  exit 1
end

if ARGV.size == 0
  STDERR.puts opt
  exit 1
end
cmd = ARGV[0]

if cmd == "listappliances" or cmd =="la"
  r = Request.new
  r.method = "GET"
  r.call = "appliances"
  xml, success = r.go
  if success
    puts ApplianceHandler.list_appliances xml
    exit 0
  else
    STDERR.puts xml
    exit 1
  end


elsif cmd == "cloneappliance" or cmd =="ca"
  clonefrom = ARGV[1]
  if clonefrom.nil? || clonefrom.empty?
    STDERR.puts "You need to specify a template."
    exit 1
  end
  r = Request.new
  r.method = "POST"
  r.call = "appliances?clone_from=#{clonefrom}"
  xml, success = r.go
  if success
    puts ApplianceHandler.clone_appliance xml
    exit 0
  else
    STDERR.puts xml
    exit 1
  end


elsif cmd == "deleteappliance" or cmd == "da"
  appliance = ARGV[1]
  if appliance.nil? || appliance.empty?
    STDERR.puts "You need to specify an appliance."
    exit 1
  end
  r = Request.new
  r.method = "DELETE"
  r.call = "appliances/#{appliance}"
  xml, success = r.go
  if success
    puts "Success."
    exit 0
  else
   STDERR.puts xml
    exit 1
  end
else
  STDERR.puts "Unknown command: #{cmd}\n"
  STDERR.puts opt
  exit 1
end