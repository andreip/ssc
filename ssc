#!/usr/bin/ruby

require 'net/http'
require 'xml/smart'
require 'cgi'

require "optparse"

$server_name="susestudio.com"
$api_prefix="api/v1/user"
$username=""
$password=""
force = false
version="0.1"


class Request
  attr_accessor :method, :call, :data

  def go
    uri = URI.parse("http://#{$server_name}/#{$api_prefix}/#{call}")
    request = nil
    if method == "GET"
      request = Net::HTTP::Get.new(uri.request_uri)
    elsif method == "POST"
      request = Net::HTTP::Post.new(uri.request_uri)
      request.set_form_data(data, ";") unless data.nil?
    elsif method == "DELETE"
      request = Net::HTTP::Delete.new(uri.request_uri)
    end
    request.basic_auth($username, $password)
    begin
      Net::HTTP.start(uri.host, uri.port) do |http|
        http.read_timeout = 45
        response = http.request(request)
        unless( response.kind_of? Net::HTTPSuccess )
          return [response.body, false]
        end
        return [response.body, true]
      end
    rescue => e
      return ["Error: #{e.to_s}", false]
    end
  end
end

class CommandHandler
   def self.doRequest r
    xml, success = r.go
    if success
     return xml
    else
      handle_error xml
    end
   end

  def self.handle_error s
    xml = XML::Smart.string(s)
    if xml.find("/error/code").length > 0
      STDERR.puts "Error '#{xml.find("/error/code").first.to_s}' occured.\nMessage: #{xml.find("/error/message").first.to_s}"
    else
      STDERR.puts "Server returned: #{s}"
    end
    exit 1
  end
end

class ApplianceHandler < CommandHandler
  def self.list_appliances
    r = Request.new
    r.method = "GET"
    r.call = "appliances"
    s = doRequest(r)

    xml = XML::Smart.string( s )
    res = String.new
    xml.find("/appliances/appliance").each do |a|
      res << "#{a.find("id").first.to_s}: #{a.find("name").first.to_s} (based on #{a.find("basesystem").first.to_s})\n"
      res << "  Cloned from: #{a.find("parent/name").first.to_s} (#{a.find("parent/id").first.to_s})\n" unless a.find("parent/name").length == 0
      res << "  Builds:      #{a.find("builds/build").length} (#{a.find("builds/build/compressed_image_size").inject(0){|sum,item| sum + item.to_i}})\n"
      res << "\n"
    end
    puts res
  end

  def self.clone_appliance args
    clonefrom = args[1]
    if clonefrom.nil? || clonefrom.empty?
      STDERR.puts "You need to specify a template."
      exit 1
    end
    r = Request.new
    r.method = "POST"
    r.call = "appliances?clone_from=#{clonefrom}"
    s = doRequest(r)

    xml = XML::Smart.string( s )
    res = String.new
    res << "Created Appliance: #{xml.find("/appliance/name").first.to_s}\n"
    res << "  Id:          " + xml.find("/appliance/id").first.to_s + "\n"
    res << "  Based on:    " + xml.find("/appliance/basesystem").first.to_s + "\n"
    res << "  Cloned from: #{xml.find("/appliance/parent/name").first.to_s} (#{xml.find("/appliance/parent/id").first.to_s})\n" unless xml.find("/appliance/parent/name").length == 0
    puts res
  end

  def self.delete_appliance args
    appliance = args[1]
    if appliance.nil? || appliance.empty?
      STDERR.puts "You need to specify an appliance."
      exit 1
    end
    r = Request.new
    r.method = "DELETE"
    r.call = "appliances/#{appliance}"
    doRequest(r)
    puts "Success."
  end

  def self.template_sets
    r = Request.new
    r.method = "GET"
    r.call = "template_sets"
    s = doRequest(r)
    
    xml = XML::Smart.string( s )
    res = String.new
    xml.find("/template_sets/template_set").each do |ts|
      res << "'#{ts.find("name").first.to_s}' Templates (#{ts.find("description").first.to_s}):\n"
      ts.find("template").each do |t|
        res << "  == #{t.find("name").first.to_s}\n"
        res << "    Id:          #{t.find("appliance_id").first.to_s}\n"
        res << "    Description: #{t.find("description").first.to_s}\n"
        res << "    Based on:    #{t.find("basesystem").first.to_s}\n\n"
      end
    end
    puts res
  end
end


class BuildHandler < CommandHandler
  def self.build_appliance args, force
    appliance = args[1]
    if appliance.nil? || appliance.empty?
      STDERR.puts "You need to specify an appliance."
      exit 1
    end
    r = Request.new
    r.method = "POST"
    r.call = "running_builds?appliance_id=#{appliance}"
    r.call += "&force=1" if force
    s = doRequest(r)

    xml = XML::Smart.string( s )
    res = String.new
    res << "Triggered build: #{xml.find("/build/id").first.to_s}" unless xml.find("/build/id").length == 0
    puts res
  end
  
  def self.show_running_build args
    build = args[1]
    if build.nil? || build.empty?
      STDERR.puts "You need to specify an running build."
      exit 1
    end
    r = Request.new
    r.method = "GET"
    r.call = "running_builds/#{build}"
    s = doRequest(r)

    xml = XML::Smart.string( s )
    res = String.new
    return unless xml.find("/running_builds/id").length > 0
    res << xml.find("/running_builds/state").first.to_s
    res << ", #{xml.find("/running_builds/percent").first.to_s}% done - #{xml.find("/running_builds/message").first.to_s} (#{xml.find("/running_builds/time_elapsed").first.to_s}s elapsed)" unless xml.find("/running_builds/state").first.to_s == "error"
    puts res
  end
end


















#if ARGV.size != 2
opt = OptionParser.new
opt.banner = "Usage: ssc [options] <cmd> [command-options]"
opt.separator("Options")
opt.on( "-h", "--help", "Print this message" ) do
  puts opt
  exit
end
opt.on( "-s", "--server", "=HOST",
  "The Studio hostname" ) do |v|
  $server_name = v
end
opt.on( "-u", "--username", "=USER_NAME", "User name") do |v|
  $username = v
end
opt.on( "-p", "--password", "=PASSWORD", "Password") do |v|
  $password = v
end
opt.on( "-v", "--version",  "Print the version") do |v|
  puts "ssc #{version} - A command line interface to SUSE Studio"
  exit 0
end
opt.on("-f", "--force", "Force action") do |v|
  force = v
end

opt.separator("\n")
opt.separator("Commands:")
opt.separator("    Managing your appliances:")
opt.separator("      listappliances,la\t\t     Get a list of your appliances")
opt.separator("      cloneappliance,ca\t\t     Create a new appliance by cloning a template")
opt.separator("      deleteappliance,da\t     Delete an appliance")
opt.separator("      listtemplates,lt\t\t     Get a list of available templates")
opt.separator("\n")
opt.separator("    Managing builds:")
opt.separator("      buildappliance,ba\t\t     Trigger a build of an appliance")
opt.separator("      showrunningbuild,sb\t     Show the status of a running build")
opt.separator("\n")

begin
  opt.parse!( ARGV )
rescue OptionParser::InvalidOption
  STDERR.puts $!
  STDERR.puts opt
  exit 1
end

if ARGV.size == 0
  STDERR.puts opt
  exit 1
end
cmd = ARGV[0]

if cmd == "listappliances" or cmd =="la"
  ApplianceHandler.list_appliances

elsif cmd == "cloneappliance" or cmd =="ca"
  ApplianceHandler.clone_appliance ARGV

elsif cmd == "deleteappliance" or cmd == "da"
  ApplianceHandler.delete_appliance ARGV

elsif cmd == "listtemplates" or cmd =="lt"
  ApplianceHandler.template_sets

elsif cmd == "buildappliance" or cmd =="ba"
  BuildHandler.build_appliance ARGV, force

elsif cmd == "showrunningbuild" or cmd =="sb"
  BuildHandler.show_running_build ARGV

else
  STDERR.puts "Unknown command: #{cmd}\n"
  STDERR.puts opt
  exit 1
end