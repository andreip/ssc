#!/usr/bin/ruby

require 'net/http'
require 'xml/smart'
require 'cgi'
require 'fileutils'
require 'optparse'

$LOAD_PATH << "#{File.dirname(__FILE__)}/../lib"
require 'appliancehandler.rb'
require 'buildhandler.rb'
require 'checkouthandler.rb'


$server_name="susestudio.com"
$api_prefix="api/v1/user"
$username=""
$password=""
force = false
follow = false
images = false
version="0.1"

def get_appliance_from_args_or_config args
  if args
    appliance = args[1]
  end
  unless appliance
    if File.exists?(".ssc/appliance.config")
      appliance_config = XML::Smart.open(".ssc/appliance.config")
      appliance = appliance_config.find("/checkout/appliance_id").first.to_s if appliance_config.find("/checkout/appliance_id").length > 0
    end
  end
  if appliance.nil? || appliance.empty?
    STDERR.puts "You need to specify an appliance."
    exit 1
  end
  appliance
end

def base_url
  "http://#{$server_name}/#{$api_prefix}"
end



opt = OptionParser.new
opt.separator("Options")
opt.on( "-s", "--server", "=HOST",
  "The Studio hostname" ) do |v|
  $server_name = v
end
opt.on( "-u", "--username", "=USER_NAME", "User name") do |v|
  $username = v
end
opt.on( "-p", "--password", "=PASSWORD", "Password") do |v|
  $password = v
end
opt.on( "-h", "--help", "Print this message" ) do
  puts opt
  exit
end
opt.on( "-v", "--version",  "Print the version") do |v|
  puts "ssc #{version} - A command line interface to SUSE Studio"
  exit 0
end


if ARGV.include?("ba") || ARGV.include?("buildappliance")
  opt.banner = "Usage: ssc [options] buildappliance APPLIANCE [command-options]"
  opt.separator("Trigger a build of an appliance.")
  opt.separator("\n")
  opt.separator("Command options:")
  opt.on( "-f", "--force","Force building the appliance even if it overwrites a build") do |v|
    force = v
  end
elsif ARGV.include?("la") || ARGV.include?("listappliances")
  opt.banner = "Usage: ssc [options] listappliances"
  opt.separator("Show a list of your appliances.")
elsif ARGV.include?("ca") || ARGV.include?("cloneappliance")
  opt.banner = "Usage: ssc [options] cloneappliance APPLIANCE"
  opt.separator("Create a new appliance by cloning a template.")
elsif ARGV.include?("da") || ARGV.include?("deleteappliance")
  opt.banner = "Usage: ssc [options] deleteappliance APPLIANCE"
  opt.separator("Delete an appliance.")
elsif ARGV.include?("lt") || ARGV.include?("listtemplates")
  opt.banner = "Usage: ssc [options] listtemplates"
  opt.separator("Get a list of available templates.")
elsif ARGV.include?("lrb") || ARGV.include?("listrunningbuilds")
  opt.banner = "Usage: ssc [options] listrunningbuilds APPLIANCE"
  opt.separator("List all running builds of an appliance.")
elsif ARGV.include?("srb") || ARGV.include?("showrunningbuild")
  opt.banner = "Usage: ssc [options] showrunningbuild ID"
  opt.separator("Show the status of a running build.")
  opt.on( "-f", "--follow","Follow the progress of the build") do |f|
    follow = f
  end
elsif ARGV.include?("lb") || ARGV.include?("listbuilds")
  opt.banner = "Usage: ssc [options] listbuilds APPLIANCE"
  opt.separator("List builds of an appliance.")
elsif ARGV.include?("sb") || ARGV.include?("showbuild")
  opt.banner = "Usage: ssc [options] showbuild ID"
  opt.separator("Show information on a build.")
elsif ARGV.include?("cb") || ARGV.include?("cancelbuild")
  opt.banner = "Usage: ssc [options] cancelbuild ID"
  opt.separator("Cancel a running build.")
elsif ARGV.include?("db") || ARGV.include?("deletebuild")
  opt.banner = "Usage: ssc [options] deletebuild ID"
  opt.separator("Delete a finished build.")
elsif ARGV.include?("co") || ARGV.include?("checkout")
  opt.banner = "Usage: ssc [options] checkout APPLIANCE"
  opt.separator("Checkout an appliance.")
  opt.on( "-i", "--download-images","Download images of the appliance") do |i|
    images = i
  end
elsif ARGV.include?("st") || ARGV.include?("status")
  opt.banner = "Usage: ssc [options] status"
  opt.separator("Show the status of the checkout.")
elsif ARGV.include?("ci") || ARGV.include?("commit")
  opt.banner = "Usage: ssc [options] commit"
  opt.separator("Commit changes to the appliance.")
elsif ARGV.include?("add")
  opt.banner = "Usage: ssc [options] add FILE"
  opt.separator("Add a file to the checkout.")
elsif ARGV.include?("rm") || ARGV.include?("remove")
  opt.banner = "Usage: ssc [options] remove FILE"
  opt.separator("Remove a file from the checkout.")
else
  opt.banner = "Usage: ssc [options] COMMAND [command-options]"
  opt.separator("SUSE Studio command line client.")
  opt.separator("Type 'ssc COMMAND --help' for help on a specific command.")

  opt.separator("\n")
  opt.separator("Commands:")
  opt.separator("    Managing your appliances:")
  opt.separator("      listappliances,la\t\t     Get a list of your appliances")
  opt.separator("      cloneappliance,ca\t\t     Create a new appliance by cloning a template")
  opt.separator("      deleteappliance,da\t     Delete an appliance")
  opt.separator("      listtemplates,lt\t\t     Get a list of available templates")
  opt.separator("\n")
  opt.separator("    Managing builds:")
  opt.separator("      buildappliance,ba\t\t     Trigger a build of an appliance")
  opt.separator("      listrunningbuilds,lrb\t     List all running builds of an appliance")
  opt.separator("      showrunningbuild,srb\t     Show the status of a running build")
  opt.separator("      listbuilds,lb\t\t     List builds of an appliance")
  opt.separator("      showbuild,sb\t\t     Show information on a build")
  opt.separator("      cancelbuild,cb\t\t     Cancel a running build")
  opt.separator("      deletebuild,db\t\t     Delete a finished build")
  opt.separator("\n")
  opt.separator("    Managing checkouts:")
  opt.separator("      checkout,co\t\t     Checkout an appliance")
  opt.separator("      status,st\t\t\t     Show the status of the checkout")
  opt.separator("      commit,ci\t\t\t     Commit changes to the appliance")
  opt.separator("      add\t\t\t     Add a file to the checkout")
  opt.separator("      rm\t\t\t     Remove a file from the checkout")
  opt.separator("\n")
end

begin
  opt.parse!( ARGV )
rescue OptionParser::InvalidOption
  STDERR.puts $!
  STDERR.puts opt
  exit 1
end

if ARGV.size == 0
  STDERR.puts opt
  exit 1
end

cmd = ARGV[0]

if cmd == "listappliances" or cmd =="la"
  ApplianceHandler.list_appliances

elsif cmd == "cloneappliance" or cmd =="ca"
  ApplianceHandler.clone_appliance ARGV

elsif cmd == "deleteappliance" or cmd == "da"
  ApplianceHandler.delete_appliance ARGV

elsif cmd == "listtemplates" or cmd =="lt"
  ApplianceHandler.template_sets

elsif cmd == "buildappliance" or cmd =="ba"
  BuildHandler.build_appliance ARGV, force

elsif cmd == "listrunningbuilds" or cmd =="lrb"
  BuildHandler.list_running_builds ARGV

elsif cmd == "showrunningbuild" or cmd =="srb"
  BuildHandler.show_running_build ARGV, follow

elsif cmd == "listbuilds" or cmd =="lb"
  BuildHandler.list_builds ARGV

elsif cmd == "showbuild" or cmd =="sb"
  BuildHandler.show_build ARGV

elsif cmd == "cancelbuild" or cmd =="cb"
  BuildHandler.cancel_build ARGV

elsif cmd == "deletebuild" or cmd =="db"
  BuildHandler.delete_build ARGV

elsif cmd == "checkout" or cmd =="co"
  CheckoutHandler.checkout ARGV, images

elsif cmd == "status" or cmd =="st"
  CheckoutHandler.status

elsif cmd == "commit" or cmd =="ci"
  CheckoutHandler.commit

elsif cmd == "add"
  CheckoutHandler.add ARGV

elsif cmd == "remove" or cmd == "rm"
  CheckoutHandler.remove ARGV

else
  STDERR.puts "Unknown command: #{cmd}\n"
  STDERR.puts opt
  exit 1
end
